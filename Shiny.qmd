---
title: "Shiny"
author: "MA615"
format: revealjs
editor: visual
---

```{=html}
<script src = "https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""></script>

<script type="text/javascript">
  $(document).ready(function() {
    $('body').prepend('<div class=\"zoomDiv\"><img src=\"\" class=\"zoomImg\"></div>');
    // onClick function for all plots (img's)
    $('img:not(.zoomImg)').click(function() {
      $('.zoomImg').attr('src', $(this).attr('src')).css({width: '100%'});
      $('.zoomDiv').css({opacity: '1', width: 'auto', border: '1px solid white', borderRadius: '5px', position: 'fixed', top: '50%', left: '50%', marginRight: '-50%', transform: 'translate(-50%, -50%)', boxShadow: '0px 0px 50px #888888', zIndex: '50', overflow: 'auto', maxHeight: '100%'});
    });
    // onClick function for zoomImg
    $('img.zoomImg').click(function() {
      $('.zoomDiv').css({opacity: '0', width: '0%'}); 
    });
  });
</script>
```

![](hadley.png)

## Shiny in the MA615 plan

![](Overview-MA615-pg-nov11.png)

## Material for Shiny

-   Hadley's Mastering Shiny with supporting material

    -   <a href="https://mastering-shiny.org/basic-app.html" target="_blank">H.Wickham, *Mastering Shiny*</a>
    -   <a href="https://mastering-shiny-solutions.netlify.app/" target="_blank">H. Baek, *Mastering Shiny Solutions* </a>
    -   <a href="https://mastering-shiny-solutions.org/" target="_blank">The R4DS Online Learning Community, *Mastering Shiny Solutions Solutions*</a>
    -   <a href="https://bookdown.org/hadrien/how_to_build_a_shiny_app_from_scratch" target="_blank">Hadrien\@rstudio.com, *how to build a shiny app from scratch* </a>

-   <a href="https://rstudio.github.io/cheatsheets/shiny-python.pdf" target="_blank">Shiny cheatsheet</a>

-   Examples

## Cheatsheet

![](shiny-cs_Page_1.jpg)

------------------------------------------------------------------------

![](shiny-cs_Page_2.jpg)

## Examples

Hadley_1 Hadley_2

### Homework (Github link due on Friday, 15 Nov. )

1.  What is the difference between Hadley_1 and Hadley_2? Use the functions Katia showed last Wednesday to investigate the difference.

    ```{r}
    library(shiny)
    library(microbenchmark)
    #ui <- fluidPage(
    #  "Hello, world!"
    #)
    #server <- function(input, output, session) {
    #}
    #shinyApp(ui, server)

    # Hadley1
    ui <- fluidPage(
      selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
      verbatimTextOutput("summary"),
      tableOutput("table")
    )

    server <- function(input, output, session) {
      output$summary <- renderPrint({
        dataset <- get(input$dataset, "package:datasets")
        summary(dataset)
      })
      
      output$table <- renderTable({
        dataset <- get(input$dataset, "package:datasets")
        dataset
      })
    }

    shinyApp(ui, server)
    # Hadley2
    server <- function(input, output, session) {
      # Create a reactive expression
      dataset <- reactive({
        get(input$dataset, "package:datasets")
      })

      output$summary <- renderPrint({
        # Use a reactive expression by calling it like a function
        summary(dataset())
      })
      
      output$table <- renderTable({
        dataset()
      })
    }

    shinyApp(ui, server)

    ```

    Using datasets in R package to test the results.

    ```{r}
    datasets <- list(
      mtcars = "mtcars",
      airquality = "airquality"
    )

    # Apply the function
    # Hadley1

    load_dataset_hadley1 <- function(dataset_name) {
      dataset <- get(dataset_name, "package:datasets")
      summary(dataset)
      dataset
    }

    # Hadley2
    load_dataset_hadley2 <- function(dataset_name) {
      dataset <- get(dataset_name, "package:datasets")
      summary(dataset)
      dataset
    }

    # Load microbanchmark function
    benchmark_datasets <- function(datasets) {
      results <- do.call(rbind, lapply(names(datasets), function(name) {
        dataset_name <- datasets[[name]]
        benchmark <- microbenchmark(
          Hadley_1 = load_dataset_hadley1(dataset_name),
          Hadley_2 = load_dataset_hadley2(dataset_name),
          times = 100
        )
        benchmark$dataset <- name
        return(benchmark)
      }))
      return(results)
    }

    benchmark_results <- benchmark_datasets(datasets)
    print(benchmark_results)
    # Compare the results
    library(dplyr)
    hadley1 <- benchmark_results %>% filter(expr == "Hadley_1") %>% select(time)
    hadley2 <- benchmark_results %>% filter(expr == "Hadley_2") %>% select(time)
    hadley3 <- benchmark_results %>% filter(grepl("Hadley_1.list", expr)) %>% select(time)
    hadley4 <- benchmark_results %>% filter(grepl("Hadley_2.list", expr)) %>% select(time)
    mean(hadley1$time)
    mean(hadley2$time)
    mean(hadley3$time)
    mean(hadley4$time)

    ```

    **##Discussion**

Hadley_1 retrieves the dataset using "get()" every time it needs to render an output, which means it reloads the data repeatedly. This approach is straightforward but can become inefficient for large datasets due to redundant data fetching. In contrast, Hadley_2 uses a reactive expression to load the dataset once and cache it. Subsequent accesses use the cached data, avoiding repeated loads. While this is more efficient for larger datasets, it introduces a slight overhead due to managing the reactive context.

For the "mtcars" dataset, Hadley_2 was faster, showing the benefit of caching when redundant data loads are minimized. However, for the larger "airquality" dataset, Hadley_1 is better than Hadley_2, likely because the reactive overhead outweighed the benefits of caching. This indicates that Hadley_1 is better suited for small datasets, while Hadley_2 excels with larger, more complex data.

1.  Prepare Chapters 2-4 from Mastering Shiny. complete in submit the homework in sections 2.3.5, 3.3.6, and 4.8.

```{r}
# 2.3.5.1

#a. verbatimTextOutput
#b. textOutput
#c. verbatimTextOutput
#d. verbatimTextOutput

# 2.3.5.2

ui <- fluidPage(
    plotOutput("plot", width = "700px", height = "300px")
)
server <- function(input, output, session) {
    output$plot <- renderPlot(plot(1:5), res = 96, 
                              alt = "Scatterplot of 5 random numbers")
}

shinyApp(ui, server)
# 2.3.5.3

ui <- fluidPage(
    dataTableOutput("table")
)
server <- function(input, output, session) {
    output$table <- renderDataTable(mtcars, 
                                    options = list(pageLength = 5,
                                                   ordering = FALSE, 
                                                   searching = FALSE))
}

shinyApp(ui, server)
# 2.3.5.4

library(reactable)

ui <- fluidPage(
  reactableOutput("table")
)

server <- function(input, output) {
  output$table <- renderReactable({
    reactable(mtcars)
  })
}

shinyApp(ui, server)
```

```{r}
# 3.3.6

ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)

server1 <- function(input, output, server) {
  output$greeting <- renderText(paste0("Hello ", input$name))
}

server2 <- function(input, output, server) {
  greeting <- reactive(paste0("Hello ", input$name))
  output$greeting <- renderText(greeting)
}

server3 <- function(input, output, server) {
  output$greting <- renderText(paste0("Hello", input$name))
}

#

server1 <- function(input, output, session) {
  c <- reactive(input$a + input$b)
  e <- reactive(c() + input$d)
  output$f <- renderText(e())
}
server2 <- function(input, output, session) {
  x <- reactive(input$x1 + input$x2 + input$x3)
  y <- reactive(input$y1 + input$y2)
  output$z <- renderText(x() / y())
}
server3 <- function(input, output, session) {
  d <- reactive(c() ^ input$d)
  a <- reactive(input$a * 10)
  c <- reactive(b() / input$c)
  b <- reactive(a() + input$b)
}

library(DiagrammeR)

grViz("
digraph server1 {
  rankdir=LR;
  node [shape = box, style=filled, color=lightblue];

  input_a [label = 'input$a']
  input_b [label = 'input$b']
  input_d [label = 'input$d']
  c [label = 'c()']
  e [label = 'e()']
  output_f [label = 'output$f']

  input_a -> c
  input_b -> c
  c -> e
  input_d -> e
  e -> output_f
}
")

grViz("
digraph server2 {
  rankdir=LR;
  node [shape = box, style=filled, color=lightwhite];

  input_x1 [label = 'input$x1']
  input_x2 [label = 'input$x2']
  input_x3 [label = 'input$x3']
  input_y1 [label = 'input$y1']
  input_y2 [label = 'input$y2']
  x [label = 'x()']
  y [label = 'y()']
  output_z [label = 'output$z']

  input_x1 -> x
  input_x2 -> x
  input_x3 -> x
  input_y1 -> y
  input_y2 -> y
  x -> output_z
  y -> output_z
}
")

grViz("
digraph server3 {
  rankdir=LR;
  node [shape = box, style=filled, color=lightcoral];

  input_a [label = 'input$a']
  input_b [label = 'input$b']
  input_c [label = 'input$c']
  input_d [label = 'input$d']
  a [label = 'a()']
  b [label = 'b()']
  c [label = 'c()']
  d [label = 'd()']

  input_a -> a
  a -> b
  input_b -> b
  b -> c
  input_c -> c
  c -> d
  input_d -> d
}
")


```

```{r}
# 4.8.2

#Flipping the order of fct_infreq() and fct_lump() changes the way levels are grouped and sorted in the summary table. In the original code, fct_infreq() is applied first to sort factor levels by frequency, followed by fct_lump() to retain only the top n most frequent levels while lumping the rest into "Other". This ensures that the top levels are kept and consistently sorted. However, if I reverse the order, fct_lump() first lumps less frequent levels into "Other" without sorting, and then fct_infreq() reorders the remaining levels. This may result in the "Other" category appearing higher in the table if its combined frequency is greater than some of the top levels, the summary output might be different.

# 4.8.3 (Not very clear, just the copy of the solutions)
#library(dplyr)
#library(ggplot2)
#library(forcats)
#library(vroom)
#library(shiny)

#injuries <- vroom::vroom("neiss/injuries.tsv.gz")
#products <- vroom::vroom("neiss/products.tsv")
#population <- vroom::vroom("neiss/population.tsv")


#ui <- fluidPage(
#  fluidRow(
#    column(8,
#           selectInput("code", "Product",
#                       choices = setNames(products$prod_code, #products$title),
#                       width = "100%"
#           )
#    ),
#    column(2, selectInput("y", "Y axis", c("rate", "count"))),
    # lets the user decide how many rows to show in the summary tables
#    column(2, numericInput("num_rows", "Number of Rows", value = 5, min = 0, max = 6))
#  ),
#  fluidRow(
#    column(4, tableOutput("diag")),
#    column(4, tableOutput("body_part")),
#    column(4, tableOutput("location"))
#  ),
#  fluidRow(
#    column(12, plotOutput("age_sex"))
#  ),
#  fluidRow(
#    column(2, actionButton("story", "Tell me a story")),
#    column(10, textOutput("narrative"))
#  )
#)

#count_top <- function(df, var, n = 5) {
#  df %>%
#    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
#    group_by({{ var }}) %>%
#    summarise(n = as.integer(sum(weight)))
#}

#server <- function(input, output, session) {
#  selected <- reactive(injuries %>% filter(prod_code == input$code))
  
#  output$diag <- renderTable(count_top(selected(), diag) %>% slice(1:input$num_rows), width = "100%")
#  output$body_part <- renderTable(count_top(selected(), body_part) %>% slice(1:input$num_rows), width = "100%")
#  output$location <- renderTable(count_top(selected(), location) %>% slice(1:input$num_rows), width = "100%")
  
#  summary <- reactive({
#    selected() %>%
#      count(age, sex, wt = weight) %>%
#      left_join(population, by = c("age", "sex")) %>%
#      mutate(rate = n / population * 1e4)
#  })
  
#  output$age_sex <- renderPlot({
#    if (input$y == "count") {
#      summary() %>%
#        ggplot(aes(age, n, colour = sex)) +
#        geom_line() +
#        labs(y = "Estimated number of injuries")
#    } else {
#      summary() %>%
#        ggplot(aes(age, rate, colour = sex)) +
#        geom_line(na.rm = TRUE) +
#        labs(y = "Injuries per 10,000 people")
#    }
#  }, res = 96)
  
#  narrative_sample <- eventReactive(
#    list(input$story, selected()),
#    selected() %>% pull(narrative) %>% sample(1)
#  )
#  output$narrative <- renderText(narrative_sample())
#}

#shinyApp(ui, server)

# 4.8.4

messages <- c("Message 1: Hello!", 
              "Message 2: How are you?", 
              "Message 3: Goodbye!")

# Define UI
ui <- fluidPage(
  textOutput("message"),
  actionButton("prev_btn", "Previous"),
  actionButton("next_btn", "Next")
)

# Define Server
server <- function(input, output, session) {
  # Track the current index (starting at 1)
  index <- reactiveVal(1)
  
  # Display the current message based on the index
  output$message <- renderText({
    messages[index()]
  })
  
  # Increment index when "Next" is clicked, but not beyond the last message
  observeEvent(input$next_btn, {
    if (index() < length(messages)) {
      index(index() + 1)
    }
  })
  
  # Decrement index when "Previous" is clicked, but not below the first message
  observeEvent(input$prev_btn, {
    if (index() > 1) {
      index(index() - 1)
    }
  })
}

# Run the Shiny app
shinyApp(ui, server)
```
